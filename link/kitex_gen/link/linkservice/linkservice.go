// Code generated by Kitex v0.12.3. DO NOT EDIT.

package linkservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	link "link_shorten_server/link/kitex_gen/link"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"generate_link": kitex.NewMethodInfo(
		generateLinkHandler,
		newLinkServiceGenerateLinkArgs,
		newLinkServiceGenerateLinkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"delete_link": kitex.NewMethodInfo(
		deleteLinkHandler,
		newLinkServiceDeleteLinkArgs,
		newLinkServiceDeleteLinkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"change_link": kitex.NewMethodInfo(
		changeLinkHandler,
		newLinkServiceChangeLinkArgs,
		newLinkServiceChangeLinkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"see_link_ranking": kitex.NewMethodInfo(
		seeLinkRankingHandler,
		newLinkServiceSeeLinkRankingArgs,
		newLinkServiceSeeLinkRankingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"see_user_link": kitex.NewMethodInfo(
		seeUserLinkHandler,
		newLinkServiceSeeUserLinkArgs,
		newLinkServiceSeeUserLinkResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"link_redirect": kitex.NewMethodInfo(
		linkRedirectHandler,
		newLinkServiceLinkRedirectArgs,
		newLinkServiceLinkRedirectResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	linkServiceServiceInfo                = NewServiceInfo()
	linkServiceServiceInfoForClient       = NewServiceInfoForClient()
	linkServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return linkServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return linkServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return linkServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LinkService"
	handlerType := (*link.LinkService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "link",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func generateLinkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*link.LinkServiceGenerateLinkArgs)
	realResult := result.(*link.LinkServiceGenerateLinkResult)
	success, err := handler.(link.LinkService).GenerateLink(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLinkServiceGenerateLinkArgs() interface{} {
	return link.NewLinkServiceGenerateLinkArgs()
}

func newLinkServiceGenerateLinkResult() interface{} {
	return link.NewLinkServiceGenerateLinkResult()
}

func deleteLinkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*link.LinkServiceDeleteLinkArgs)
	realResult := result.(*link.LinkServiceDeleteLinkResult)
	success, err := handler.(link.LinkService).DeleteLink(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLinkServiceDeleteLinkArgs() interface{} {
	return link.NewLinkServiceDeleteLinkArgs()
}

func newLinkServiceDeleteLinkResult() interface{} {
	return link.NewLinkServiceDeleteLinkResult()
}

func changeLinkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*link.LinkServiceChangeLinkArgs)
	realResult := result.(*link.LinkServiceChangeLinkResult)
	success, err := handler.(link.LinkService).ChangeLink(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLinkServiceChangeLinkArgs() interface{} {
	return link.NewLinkServiceChangeLinkArgs()
}

func newLinkServiceChangeLinkResult() interface{} {
	return link.NewLinkServiceChangeLinkResult()
}

func seeLinkRankingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*link.LinkServiceSeeLinkRankingArgs)
	realResult := result.(*link.LinkServiceSeeLinkRankingResult)
	success, err := handler.(link.LinkService).SeeLinkRanking(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLinkServiceSeeLinkRankingArgs() interface{} {
	return link.NewLinkServiceSeeLinkRankingArgs()
}

func newLinkServiceSeeLinkRankingResult() interface{} {
	return link.NewLinkServiceSeeLinkRankingResult()
}

func seeUserLinkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*link.LinkServiceSeeUserLinkArgs)
	realResult := result.(*link.LinkServiceSeeUserLinkResult)
	success, err := handler.(link.LinkService).SeeUserLink(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLinkServiceSeeUserLinkArgs() interface{} {
	return link.NewLinkServiceSeeUserLinkArgs()
}

func newLinkServiceSeeUserLinkResult() interface{} {
	return link.NewLinkServiceSeeUserLinkResult()
}

func linkRedirectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*link.LinkServiceLinkRedirectArgs)
	realResult := result.(*link.LinkServiceLinkRedirectResult)
	success, err := handler.(link.LinkService).LinkRedirect(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLinkServiceLinkRedirectArgs() interface{} {
	return link.NewLinkServiceLinkRedirectArgs()
}

func newLinkServiceLinkRedirectResult() interface{} {
	return link.NewLinkServiceLinkRedirectResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GenerateLink(ctx context.Context, req *link.GenerateLinkRequest) (r *link.GenerateLinkResponse, err error) {
	var _args link.LinkServiceGenerateLinkArgs
	_args.Req = req
	var _result link.LinkServiceGenerateLinkResult
	if err = p.c.Call(ctx, "generate_link", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteLink(ctx context.Context, req *link.DeleteLinkRequest) (r *link.DeleteLinkResponse, err error) {
	var _args link.LinkServiceDeleteLinkArgs
	_args.Req = req
	var _result link.LinkServiceDeleteLinkResult
	if err = p.c.Call(ctx, "delete_link", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeLink(ctx context.Context, req *link.ChangeLinkRequest) (r *link.ChangeLinkResponse, err error) {
	var _args link.LinkServiceChangeLinkArgs
	_args.Req = req
	var _result link.LinkServiceChangeLinkResult
	if err = p.c.Call(ctx, "change_link", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SeeLinkRanking(ctx context.Context, req *link.SeeLinkRankingRequest) (r *link.SeeLinkRankingResponse, err error) {
	var _args link.LinkServiceSeeLinkRankingArgs
	_args.Req = req
	var _result link.LinkServiceSeeLinkRankingResult
	if err = p.c.Call(ctx, "see_link_ranking", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SeeUserLink(ctx context.Context, req *link.SeeUserLinkRequest) (r *link.SeeUserLinkResponse, err error) {
	var _args link.LinkServiceSeeUserLinkArgs
	_args.Req = req
	var _result link.LinkServiceSeeUserLinkResult
	if err = p.c.Call(ctx, "see_user_link", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LinkRedirect(ctx context.Context, req *link.LinkRedirectRequest) (r *link.LinkRedirectResponse, err error) {
	var _args link.LinkServiceLinkRedirectArgs
	_args.Req = req
	var _result link.LinkServiceLinkRedirectResult
	if err = p.c.Call(ctx, "link_redirect", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
