// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package link

import (
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type Status struct {
	Code    string `thrift:"code,1,required" frugal:"1,required,string" json:"code"`
	Message string `thrift:"message,2,required" frugal:"2,required,string" json:"message"`
}

func NewStatus() *Status {
	return &Status{}
}

func (p *Status) InitDefault() {
}

func (p *Status) GetCode() (v string) {
	return p.Code
}

func (p *Status) GetMessage() (v string) {
	return p.Message
}
func (p *Status) SetCode(val string) {
	p.Code = val
}
func (p *Status) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_Status = map[int16]string{
	1: "code",
	2: "message",
}

func (p *Status) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCode bool = false
	var issetMessage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMessage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMessage {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Status[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Status[fieldId]))
}

func (p *Status) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Code = _field
	return nil
}
func (p *Status) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Message = _field
	return nil
}

func (p *Status) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Status"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Status) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Status) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Status) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Status(%+v)", *p)

}

func (p *Status) DeepEqual(ano *Status) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *Status) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Code, src) != 0 {
		return false
	}
	return true
}
func (p *Status) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GenerateLinkRequest struct {
	LongUrl string  `thrift:"long_url,1,required" frugal:"1,required,string" json:"long_url"`
	Token   *string `thrift:"token,2,optional" frugal:"2,optional,string" json:"token,omitempty"`
}

func NewGenerateLinkRequest() *GenerateLinkRequest {
	return &GenerateLinkRequest{}
}

func (p *GenerateLinkRequest) InitDefault() {
}

func (p *GenerateLinkRequest) GetLongUrl() (v string) {
	return p.LongUrl
}

var GenerateLinkRequest_Token_DEFAULT string

func (p *GenerateLinkRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return GenerateLinkRequest_Token_DEFAULT
	}
	return *p.Token
}
func (p *GenerateLinkRequest) SetLongUrl(val string) {
	p.LongUrl = val
}
func (p *GenerateLinkRequest) SetToken(val *string) {
	p.Token = val
}

var fieldIDToName_GenerateLinkRequest = map[int16]string{
	1: "long_url",
	2: "token",
}

func (p *GenerateLinkRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *GenerateLinkRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLongUrl bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLongUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLongUrl {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenerateLinkRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GenerateLinkRequest[fieldId]))
}

func (p *GenerateLinkRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LongUrl = _field
	return nil
}
func (p *GenerateLinkRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}

func (p *GenerateLinkRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateLinkRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenerateLinkRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("long_url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LongUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenerateLinkRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GenerateLinkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenerateLinkRequest(%+v)", *p)

}

func (p *GenerateLinkRequest) DeepEqual(ano *GenerateLinkRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LongUrl) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *GenerateLinkRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.LongUrl, src) != 0 {
		return false
	}
	return true
}
func (p *GenerateLinkRequest) Field2DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}

type GenerateLinkResponse struct {
	Status   *Status `thrift:"status,1,required" frugal:"1,required,Status" json:"status"`
	ShortUrl *string `thrift:"short_url,2,optional" frugal:"2,optional,string" json:"short_url,omitempty"`
}

func NewGenerateLinkResponse() *GenerateLinkResponse {
	return &GenerateLinkResponse{}
}

func (p *GenerateLinkResponse) InitDefault() {
}

var GenerateLinkResponse_Status_DEFAULT *Status

func (p *GenerateLinkResponse) GetStatus() (v *Status) {
	if !p.IsSetStatus() {
		return GenerateLinkResponse_Status_DEFAULT
	}
	return p.Status
}

var GenerateLinkResponse_ShortUrl_DEFAULT string

func (p *GenerateLinkResponse) GetShortUrl() (v string) {
	if !p.IsSetShortUrl() {
		return GenerateLinkResponse_ShortUrl_DEFAULT
	}
	return *p.ShortUrl
}
func (p *GenerateLinkResponse) SetStatus(val *Status) {
	p.Status = val
}
func (p *GenerateLinkResponse) SetShortUrl(val *string) {
	p.ShortUrl = val
}

var fieldIDToName_GenerateLinkResponse = map[int16]string{
	1: "status",
	2: "short_url",
}

func (p *GenerateLinkResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GenerateLinkResponse) IsSetShortUrl() bool {
	return p.ShortUrl != nil
}

func (p *GenerateLinkResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenerateLinkResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GenerateLinkResponse[fieldId]))
}

func (p *GenerateLinkResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *GenerateLinkResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ShortUrl = _field
	return nil
}

func (p *GenerateLinkResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateLinkResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenerateLinkResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenerateLinkResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShortUrl() {
		if err = oprot.WriteFieldBegin("short_url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ShortUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GenerateLinkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenerateLinkResponse(%+v)", *p)

}

func (p *GenerateLinkResponse) DeepEqual(ano *GenerateLinkResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.ShortUrl) {
		return false
	}
	return true
}

func (p *GenerateLinkResponse) Field1DeepEqual(src *Status) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GenerateLinkResponse) Field2DeepEqual(src *string) bool {

	if p.ShortUrl == src {
		return true
	} else if p.ShortUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ShortUrl, *src) != 0 {
		return false
	}
	return true
}

type DeleteLinkRequest struct {
	ShortUrl string  `thrift:"short_url,1,required" frugal:"1,required,string" json:"short_url"`
	Token    *string `thrift:"token,2,optional" frugal:"2,optional,string" json:"token,omitempty"`
}

func NewDeleteLinkRequest() *DeleteLinkRequest {
	return &DeleteLinkRequest{}
}

func (p *DeleteLinkRequest) InitDefault() {
}

func (p *DeleteLinkRequest) GetShortUrl() (v string) {
	return p.ShortUrl
}

var DeleteLinkRequest_Token_DEFAULT string

func (p *DeleteLinkRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return DeleteLinkRequest_Token_DEFAULT
	}
	return *p.Token
}
func (p *DeleteLinkRequest) SetShortUrl(val string) {
	p.ShortUrl = val
}
func (p *DeleteLinkRequest) SetToken(val *string) {
	p.Token = val
}

var fieldIDToName_DeleteLinkRequest = map[int16]string{
	1: "short_url",
	2: "token",
}

func (p *DeleteLinkRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *DeleteLinkRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetShortUrl bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetShortUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetShortUrl {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteLinkRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteLinkRequest[fieldId]))
}

func (p *DeleteLinkRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShortUrl = _field
	return nil
}
func (p *DeleteLinkRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}

func (p *DeleteLinkRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteLinkRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteLinkRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("short_url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShortUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteLinkRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteLinkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteLinkRequest(%+v)", *p)

}

func (p *DeleteLinkRequest) DeepEqual(ano *DeleteLinkRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ShortUrl) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *DeleteLinkRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ShortUrl, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteLinkRequest) Field2DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}

type DeleteLinkResponse struct {
	Status *Status `thrift:"status,1,required" frugal:"1,required,Status" json:"status"`
}

func NewDeleteLinkResponse() *DeleteLinkResponse {
	return &DeleteLinkResponse{}
}

func (p *DeleteLinkResponse) InitDefault() {
}

var DeleteLinkResponse_Status_DEFAULT *Status

func (p *DeleteLinkResponse) GetStatus() (v *Status) {
	if !p.IsSetStatus() {
		return DeleteLinkResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *DeleteLinkResponse) SetStatus(val *Status) {
	p.Status = val
}

var fieldIDToName_DeleteLinkResponse = map[int16]string{
	1: "status",
}

func (p *DeleteLinkResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *DeleteLinkResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteLinkResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteLinkResponse[fieldId]))
}

func (p *DeleteLinkResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *DeleteLinkResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteLinkResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteLinkResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteLinkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteLinkResponse(%+v)", *p)

}

func (p *DeleteLinkResponse) DeepEqual(ano *DeleteLinkResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *DeleteLinkResponse) Field1DeepEqual(src *Status) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type ChangeLinkRequest struct {
	ShortUrl    string  `thrift:"short_url,1,required" frugal:"1,required,string" json:"short_url"`
	NewLongUrl_ string  `thrift:"new_long_url,2,required" frugal:"2,required,string" json:"new_long_url"`
	Token       *string `thrift:"token,3,optional" frugal:"3,optional,string" json:"token,omitempty"`
}

func NewChangeLinkRequest() *ChangeLinkRequest {
	return &ChangeLinkRequest{}
}

func (p *ChangeLinkRequest) InitDefault() {
}

func (p *ChangeLinkRequest) GetShortUrl() (v string) {
	return p.ShortUrl
}

func (p *ChangeLinkRequest) GetNewLongUrl_() (v string) {
	return p.NewLongUrl_
}

var ChangeLinkRequest_Token_DEFAULT string

func (p *ChangeLinkRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return ChangeLinkRequest_Token_DEFAULT
	}
	return *p.Token
}
func (p *ChangeLinkRequest) SetShortUrl(val string) {
	p.ShortUrl = val
}
func (p *ChangeLinkRequest) SetNewLongUrl_(val string) {
	p.NewLongUrl_ = val
}
func (p *ChangeLinkRequest) SetToken(val *string) {
	p.Token = val
}

var fieldIDToName_ChangeLinkRequest = map[int16]string{
	1: "short_url",
	2: "new_long_url",
	3: "token",
}

func (p *ChangeLinkRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *ChangeLinkRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetShortUrl bool = false
	var issetNewLongUrl_ bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetShortUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNewLongUrl_ = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetShortUrl {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNewLongUrl_ {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChangeLinkRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChangeLinkRequest[fieldId]))
}

func (p *ChangeLinkRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShortUrl = _field
	return nil
}
func (p *ChangeLinkRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewLongUrl_ = _field
	return nil
}
func (p *ChangeLinkRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}

func (p *ChangeLinkRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeLinkRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChangeLinkRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("short_url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShortUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChangeLinkRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_long_url", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewLongUrl_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChangeLinkRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChangeLinkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeLinkRequest(%+v)", *p)

}

func (p *ChangeLinkRequest) DeepEqual(ano *ChangeLinkRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ShortUrl) {
		return false
	}
	if !p.Field2DeepEqual(ano.NewLongUrl_) {
		return false
	}
	if !p.Field3DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *ChangeLinkRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ShortUrl, src) != 0 {
		return false
	}
	return true
}
func (p *ChangeLinkRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.NewLongUrl_, src) != 0 {
		return false
	}
	return true
}
func (p *ChangeLinkRequest) Field3DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}

type ChangeLinkResponse struct {
	Status *Status `thrift:"status,1,required" frugal:"1,required,Status" json:"status"`
}

func NewChangeLinkResponse() *ChangeLinkResponse {
	return &ChangeLinkResponse{}
}

func (p *ChangeLinkResponse) InitDefault() {
}

var ChangeLinkResponse_Status_DEFAULT *Status

func (p *ChangeLinkResponse) GetStatus() (v *Status) {
	if !p.IsSetStatus() {
		return ChangeLinkResponse_Status_DEFAULT
	}
	return p.Status
}
func (p *ChangeLinkResponse) SetStatus(val *Status) {
	p.Status = val
}

var fieldIDToName_ChangeLinkResponse = map[int16]string{
	1: "status",
}

func (p *ChangeLinkResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ChangeLinkResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChangeLinkResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChangeLinkResponse[fieldId]))
}

func (p *ChangeLinkResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *ChangeLinkResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeLinkResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChangeLinkResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChangeLinkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeLinkResponse(%+v)", *p)

}

func (p *ChangeLinkResponse) DeepEqual(ano *ChangeLinkResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ChangeLinkResponse) Field1DeepEqual(src *Status) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type SeeLinkRankingRequest struct {
}

func NewSeeLinkRankingRequest() *SeeLinkRankingRequest {
	return &SeeLinkRankingRequest{}
}

func (p *SeeLinkRankingRequest) InitDefault() {
}

var fieldIDToName_SeeLinkRankingRequest = map[int16]string{}

func (p *SeeLinkRankingRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SeeLinkRankingRequest) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("SeeLinkRankingRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SeeLinkRankingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SeeLinkRankingRequest(%+v)", *p)

}

func (p *SeeLinkRankingRequest) DeepEqual(ano *SeeLinkRankingRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type SeeLinkRankingResponseData struct {
	UserId        int32 `thrift:"user_id,1,required" frugal:"1,required,i32" json:"user_id"`
	Rank          int32 `thrift:"rank,2,required" frugal:"2,required,i32" json:"rank"`
	ShortUrlCount int32 `thrift:"short_url_count,3,required" frugal:"3,required,i32" json:"short_url_count"`
}

func NewSeeLinkRankingResponseData() *SeeLinkRankingResponseData {
	return &SeeLinkRankingResponseData{}
}

func (p *SeeLinkRankingResponseData) InitDefault() {
}

func (p *SeeLinkRankingResponseData) GetUserId() (v int32) {
	return p.UserId
}

func (p *SeeLinkRankingResponseData) GetRank() (v int32) {
	return p.Rank
}

func (p *SeeLinkRankingResponseData) GetShortUrlCount() (v int32) {
	return p.ShortUrlCount
}
func (p *SeeLinkRankingResponseData) SetUserId(val int32) {
	p.UserId = val
}
func (p *SeeLinkRankingResponseData) SetRank(val int32) {
	p.Rank = val
}
func (p *SeeLinkRankingResponseData) SetShortUrlCount(val int32) {
	p.ShortUrlCount = val
}

var fieldIDToName_SeeLinkRankingResponseData = map[int16]string{
	1: "user_id",
	2: "rank",
	3: "short_url_count",
}

func (p *SeeLinkRankingResponseData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetRank bool = false
	var issetShortUrlCount bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetRank = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetShortUrlCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRank {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetShortUrlCount {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SeeLinkRankingResponseData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SeeLinkRankingResponseData[fieldId]))
}

func (p *SeeLinkRankingResponseData) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *SeeLinkRankingResponseData) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Rank = _field
	return nil
}
func (p *SeeLinkRankingResponseData) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShortUrlCount = _field
	return nil
}

func (p *SeeLinkRankingResponseData) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SeeLinkRankingResponseData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SeeLinkRankingResponseData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SeeLinkRankingResponseData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rank", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Rank); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SeeLinkRankingResponseData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("short_url_count", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ShortUrlCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SeeLinkRankingResponseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SeeLinkRankingResponseData(%+v)", *p)

}

func (p *SeeLinkRankingResponseData) DeepEqual(ano *SeeLinkRankingResponseData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Rank) {
		return false
	}
	if !p.Field3DeepEqual(ano.ShortUrlCount) {
		return false
	}
	return true
}

func (p *SeeLinkRankingResponseData) Field1DeepEqual(src int32) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *SeeLinkRankingResponseData) Field2DeepEqual(src int32) bool {

	if p.Rank != src {
		return false
	}
	return true
}
func (p *SeeLinkRankingResponseData) Field3DeepEqual(src int32) bool {

	if p.ShortUrlCount != src {
		return false
	}
	return true
}

type SeeLinkRankingResponse struct {
	Status       *Status                       `thrift:"status,1,required" frugal:"1,required,Status" json:"status"`
	ShortUrlList []*SeeLinkRankingResponseData `thrift:"short_url_list,2,optional" frugal:"2,optional,list<SeeLinkRankingResponseData>" json:"short_url_list,omitempty"`
}

func NewSeeLinkRankingResponse() *SeeLinkRankingResponse {
	return &SeeLinkRankingResponse{}
}

func (p *SeeLinkRankingResponse) InitDefault() {
}

var SeeLinkRankingResponse_Status_DEFAULT *Status

func (p *SeeLinkRankingResponse) GetStatus() (v *Status) {
	if !p.IsSetStatus() {
		return SeeLinkRankingResponse_Status_DEFAULT
	}
	return p.Status
}

var SeeLinkRankingResponse_ShortUrlList_DEFAULT []*SeeLinkRankingResponseData

func (p *SeeLinkRankingResponse) GetShortUrlList() (v []*SeeLinkRankingResponseData) {
	if !p.IsSetShortUrlList() {
		return SeeLinkRankingResponse_ShortUrlList_DEFAULT
	}
	return p.ShortUrlList
}
func (p *SeeLinkRankingResponse) SetStatus(val *Status) {
	p.Status = val
}
func (p *SeeLinkRankingResponse) SetShortUrlList(val []*SeeLinkRankingResponseData) {
	p.ShortUrlList = val
}

var fieldIDToName_SeeLinkRankingResponse = map[int16]string{
	1: "status",
	2: "short_url_list",
}

func (p *SeeLinkRankingResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *SeeLinkRankingResponse) IsSetShortUrlList() bool {
	return p.ShortUrlList != nil
}

func (p *SeeLinkRankingResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SeeLinkRankingResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SeeLinkRankingResponse[fieldId]))
}

func (p *SeeLinkRankingResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *SeeLinkRankingResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SeeLinkRankingResponseData, 0, size)
	values := make([]SeeLinkRankingResponseData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ShortUrlList = _field
	return nil
}

func (p *SeeLinkRankingResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SeeLinkRankingResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SeeLinkRankingResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SeeLinkRankingResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShortUrlList() {
		if err = oprot.WriteFieldBegin("short_url_list", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ShortUrlList)); err != nil {
			return err
		}
		for _, v := range p.ShortUrlList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SeeLinkRankingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SeeLinkRankingResponse(%+v)", *p)

}

func (p *SeeLinkRankingResponse) DeepEqual(ano *SeeLinkRankingResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.ShortUrlList) {
		return false
	}
	return true
}

func (p *SeeLinkRankingResponse) Field1DeepEqual(src *Status) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SeeLinkRankingResponse) Field2DeepEqual(src []*SeeLinkRankingResponseData) bool {

	if len(p.ShortUrlList) != len(src) {
		return false
	}
	for i, v := range p.ShortUrlList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type SeeUserLinkRequest struct {
	UserId int32 `thrift:"user_id,1,required" frugal:"1,required,i32" json:"user_id"`
}

func NewSeeUserLinkRequest() *SeeUserLinkRequest {
	return &SeeUserLinkRequest{}
}

func (p *SeeUserLinkRequest) InitDefault() {
}

func (p *SeeUserLinkRequest) GetUserId() (v int32) {
	return p.UserId
}
func (p *SeeUserLinkRequest) SetUserId(val int32) {
	p.UserId = val
}

var fieldIDToName_SeeUserLinkRequest = map[int16]string{
	1: "user_id",
}

func (p *SeeUserLinkRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SeeUserLinkRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SeeUserLinkRequest[fieldId]))
}

func (p *SeeUserLinkRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}

func (p *SeeUserLinkRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SeeUserLinkRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SeeUserLinkRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SeeUserLinkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SeeUserLinkRequest(%+v)", *p)

}

func (p *SeeUserLinkRequest) DeepEqual(ano *SeeUserLinkRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *SeeUserLinkRequest) Field1DeepEqual(src int32) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type SeeUserLinkResponseData struct {
	ShortUrl string `thrift:"short_url,1,required" frugal:"1,required,string" json:"short_url"`
	LongUrl  string `thrift:"long_url,2,required" frugal:"2,required,string" json:"long_url"`
}

func NewSeeUserLinkResponseData() *SeeUserLinkResponseData {
	return &SeeUserLinkResponseData{}
}

func (p *SeeUserLinkResponseData) InitDefault() {
}

func (p *SeeUserLinkResponseData) GetShortUrl() (v string) {
	return p.ShortUrl
}

func (p *SeeUserLinkResponseData) GetLongUrl() (v string) {
	return p.LongUrl
}
func (p *SeeUserLinkResponseData) SetShortUrl(val string) {
	p.ShortUrl = val
}
func (p *SeeUserLinkResponseData) SetLongUrl(val string) {
	p.LongUrl = val
}

var fieldIDToName_SeeUserLinkResponseData = map[int16]string{
	1: "short_url",
	2: "long_url",
}

func (p *SeeUserLinkResponseData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetShortUrl bool = false
	var issetLongUrl bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetShortUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLongUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetShortUrl {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLongUrl {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SeeUserLinkResponseData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SeeUserLinkResponseData[fieldId]))
}

func (p *SeeUserLinkResponseData) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShortUrl = _field
	return nil
}
func (p *SeeUserLinkResponseData) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LongUrl = _field
	return nil
}

func (p *SeeUserLinkResponseData) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SeeUserLinkResponseData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SeeUserLinkResponseData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("short_url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShortUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SeeUserLinkResponseData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("long_url", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LongUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SeeUserLinkResponseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SeeUserLinkResponseData(%+v)", *p)

}

func (p *SeeUserLinkResponseData) DeepEqual(ano *SeeUserLinkResponseData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ShortUrl) {
		return false
	}
	if !p.Field2DeepEqual(ano.LongUrl) {
		return false
	}
	return true
}

func (p *SeeUserLinkResponseData) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ShortUrl, src) != 0 {
		return false
	}
	return true
}
func (p *SeeUserLinkResponseData) Field2DeepEqual(src string) bool {

	if strings.Compare(p.LongUrl, src) != 0 {
		return false
	}
	return true
}

type SeeUserLinkResponse struct {
	Status       *Status                    `thrift:"status,1,required" frugal:"1,required,Status" json:"status"`
	ShortUrlList []*SeeUserLinkResponseData `thrift:"short_url_list,2,optional" frugal:"2,optional,list<SeeUserLinkResponseData>" json:"short_url_list,omitempty"`
}

func NewSeeUserLinkResponse() *SeeUserLinkResponse {
	return &SeeUserLinkResponse{}
}

func (p *SeeUserLinkResponse) InitDefault() {
}

var SeeUserLinkResponse_Status_DEFAULT *Status

func (p *SeeUserLinkResponse) GetStatus() (v *Status) {
	if !p.IsSetStatus() {
		return SeeUserLinkResponse_Status_DEFAULT
	}
	return p.Status
}

var SeeUserLinkResponse_ShortUrlList_DEFAULT []*SeeUserLinkResponseData

func (p *SeeUserLinkResponse) GetShortUrlList() (v []*SeeUserLinkResponseData) {
	if !p.IsSetShortUrlList() {
		return SeeUserLinkResponse_ShortUrlList_DEFAULT
	}
	return p.ShortUrlList
}
func (p *SeeUserLinkResponse) SetStatus(val *Status) {
	p.Status = val
}
func (p *SeeUserLinkResponse) SetShortUrlList(val []*SeeUserLinkResponseData) {
	p.ShortUrlList = val
}

var fieldIDToName_SeeUserLinkResponse = map[int16]string{
	1: "status",
	2: "short_url_list",
}

func (p *SeeUserLinkResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *SeeUserLinkResponse) IsSetShortUrlList() bool {
	return p.ShortUrlList != nil
}

func (p *SeeUserLinkResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SeeUserLinkResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SeeUserLinkResponse[fieldId]))
}

func (p *SeeUserLinkResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *SeeUserLinkResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SeeUserLinkResponseData, 0, size)
	values := make([]SeeUserLinkResponseData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ShortUrlList = _field
	return nil
}

func (p *SeeUserLinkResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SeeUserLinkResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SeeUserLinkResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SeeUserLinkResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShortUrlList() {
		if err = oprot.WriteFieldBegin("short_url_list", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ShortUrlList)); err != nil {
			return err
		}
		for _, v := range p.ShortUrlList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SeeUserLinkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SeeUserLinkResponse(%+v)", *p)

}

func (p *SeeUserLinkResponse) DeepEqual(ano *SeeUserLinkResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.ShortUrlList) {
		return false
	}
	return true
}

func (p *SeeUserLinkResponse) Field1DeepEqual(src *Status) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SeeUserLinkResponse) Field2DeepEqual(src []*SeeUserLinkResponseData) bool {

	if len(p.ShortUrlList) != len(src) {
		return false
	}
	for i, v := range p.ShortUrlList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type LinkRedirectRequest struct {
	ShortUrl string `thrift:"short_url,1,required" frugal:"1,required,string" json:"short_url"`
}

func NewLinkRedirectRequest() *LinkRedirectRequest {
	return &LinkRedirectRequest{}
}

func (p *LinkRedirectRequest) InitDefault() {
}

func (p *LinkRedirectRequest) GetShortUrl() (v string) {
	return p.ShortUrl
}
func (p *LinkRedirectRequest) SetShortUrl(val string) {
	p.ShortUrl = val
}

var fieldIDToName_LinkRedirectRequest = map[int16]string{
	1: "short_url",
}

func (p *LinkRedirectRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetShortUrl bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetShortUrl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetShortUrl {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkRedirectRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LinkRedirectRequest[fieldId]))
}

func (p *LinkRedirectRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShortUrl = _field
	return nil
}

func (p *LinkRedirectRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("LinkRedirectRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkRedirectRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("short_url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShortUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LinkRedirectRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkRedirectRequest(%+v)", *p)

}

func (p *LinkRedirectRequest) DeepEqual(ano *LinkRedirectRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ShortUrl) {
		return false
	}
	return true
}

func (p *LinkRedirectRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ShortUrl, src) != 0 {
		return false
	}
	return true
}

type LinkRedirectResponse struct {
	Status  *Status `thrift:"status,1,required" frugal:"1,required,Status" json:"status"`
	LongUrl *string `thrift:"long_url,2,optional" frugal:"2,optional,string" json:"long_url,omitempty"`
}

func NewLinkRedirectResponse() *LinkRedirectResponse {
	return &LinkRedirectResponse{}
}

func (p *LinkRedirectResponse) InitDefault() {
}

var LinkRedirectResponse_Status_DEFAULT *Status

func (p *LinkRedirectResponse) GetStatus() (v *Status) {
	if !p.IsSetStatus() {
		return LinkRedirectResponse_Status_DEFAULT
	}
	return p.Status
}

var LinkRedirectResponse_LongUrl_DEFAULT string

func (p *LinkRedirectResponse) GetLongUrl() (v string) {
	if !p.IsSetLongUrl() {
		return LinkRedirectResponse_LongUrl_DEFAULT
	}
	return *p.LongUrl
}
func (p *LinkRedirectResponse) SetStatus(val *Status) {
	p.Status = val
}
func (p *LinkRedirectResponse) SetLongUrl(val *string) {
	p.LongUrl = val
}

var fieldIDToName_LinkRedirectResponse = map[int16]string{
	1: "status",
	2: "long_url",
}

func (p *LinkRedirectResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *LinkRedirectResponse) IsSetLongUrl() bool {
	return p.LongUrl != nil
}

func (p *LinkRedirectResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkRedirectResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LinkRedirectResponse[fieldId]))
}

func (p *LinkRedirectResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *LinkRedirectResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LongUrl = _field
	return nil
}

func (p *LinkRedirectResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("LinkRedirectResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkRedirectResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LinkRedirectResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongUrl() {
		if err = oprot.WriteFieldBegin("long_url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LongUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LinkRedirectResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkRedirectResponse(%+v)", *p)

}

func (p *LinkRedirectResponse) DeepEqual(ano *LinkRedirectResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.LongUrl) {
		return false
	}
	return true
}

func (p *LinkRedirectResponse) Field1DeepEqual(src *Status) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LinkRedirectResponse) Field2DeepEqual(src *string) bool {

	if p.LongUrl == src {
		return true
	} else if p.LongUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LongUrl, *src) != 0 {
		return false
	}
	return true
}

type LinkService interface {
	GenerateLink(ctx context.Context, req *GenerateLinkRequest) (r *GenerateLinkResponse, err error)

	DeleteLink(ctx context.Context, req *DeleteLinkRequest) (r *DeleteLinkResponse, err error)

	ChangeLink(ctx context.Context, req *ChangeLinkRequest) (r *ChangeLinkResponse, err error)

	SeeLinkRanking(ctx context.Context, req *SeeLinkRankingRequest) (r *SeeLinkRankingResponse, err error)

	SeeUserLink(ctx context.Context, req *SeeUserLinkRequest) (r *SeeUserLinkResponse, err error)

	LinkRedirect(ctx context.Context, req *LinkRedirectRequest) (r *LinkRedirectResponse, err error)
}

type LinkServiceGenerateLinkArgs struct {
	Req *GenerateLinkRequest `thrift:"req,1" frugal:"1,default,GenerateLinkRequest" json:"req"`
}

func NewLinkServiceGenerateLinkArgs() *LinkServiceGenerateLinkArgs {
	return &LinkServiceGenerateLinkArgs{}
}

func (p *LinkServiceGenerateLinkArgs) InitDefault() {
}

var LinkServiceGenerateLinkArgs_Req_DEFAULT *GenerateLinkRequest

func (p *LinkServiceGenerateLinkArgs) GetReq() (v *GenerateLinkRequest) {
	if !p.IsSetReq() {
		return LinkServiceGenerateLinkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LinkServiceGenerateLinkArgs) SetReq(val *GenerateLinkRequest) {
	p.Req = val
}

var fieldIDToName_LinkServiceGenerateLinkArgs = map[int16]string{
	1: "req",
}

func (p *LinkServiceGenerateLinkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LinkServiceGenerateLinkArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceGenerateLinkArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceGenerateLinkArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGenerateLinkRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LinkServiceGenerateLinkArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("generate_link_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceGenerateLinkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LinkServiceGenerateLinkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceGenerateLinkArgs(%+v)", *p)

}

func (p *LinkServiceGenerateLinkArgs) DeepEqual(ano *LinkServiceGenerateLinkArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LinkServiceGenerateLinkArgs) Field1DeepEqual(src *GenerateLinkRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceGenerateLinkResult struct {
	Success *GenerateLinkResponse `thrift:"success,0,optional" frugal:"0,optional,GenerateLinkResponse" json:"success,omitempty"`
}

func NewLinkServiceGenerateLinkResult() *LinkServiceGenerateLinkResult {
	return &LinkServiceGenerateLinkResult{}
}

func (p *LinkServiceGenerateLinkResult) InitDefault() {
}

var LinkServiceGenerateLinkResult_Success_DEFAULT *GenerateLinkResponse

func (p *LinkServiceGenerateLinkResult) GetSuccess() (v *GenerateLinkResponse) {
	if !p.IsSetSuccess() {
		return LinkServiceGenerateLinkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LinkServiceGenerateLinkResult) SetSuccess(x interface{}) {
	p.Success = x.(*GenerateLinkResponse)
}

var fieldIDToName_LinkServiceGenerateLinkResult = map[int16]string{
	0: "success",
}

func (p *LinkServiceGenerateLinkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LinkServiceGenerateLinkResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceGenerateLinkResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceGenerateLinkResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGenerateLinkResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LinkServiceGenerateLinkResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("generate_link_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceGenerateLinkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LinkServiceGenerateLinkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceGenerateLinkResult(%+v)", *p)

}

func (p *LinkServiceGenerateLinkResult) DeepEqual(ano *LinkServiceGenerateLinkResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LinkServiceGenerateLinkResult) Field0DeepEqual(src *GenerateLinkResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceDeleteLinkArgs struct {
	Req *DeleteLinkRequest `thrift:"req,1" frugal:"1,default,DeleteLinkRequest" json:"req"`
}

func NewLinkServiceDeleteLinkArgs() *LinkServiceDeleteLinkArgs {
	return &LinkServiceDeleteLinkArgs{}
}

func (p *LinkServiceDeleteLinkArgs) InitDefault() {
}

var LinkServiceDeleteLinkArgs_Req_DEFAULT *DeleteLinkRequest

func (p *LinkServiceDeleteLinkArgs) GetReq() (v *DeleteLinkRequest) {
	if !p.IsSetReq() {
		return LinkServiceDeleteLinkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LinkServiceDeleteLinkArgs) SetReq(val *DeleteLinkRequest) {
	p.Req = val
}

var fieldIDToName_LinkServiceDeleteLinkArgs = map[int16]string{
	1: "req",
}

func (p *LinkServiceDeleteLinkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LinkServiceDeleteLinkArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceDeleteLinkArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceDeleteLinkArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteLinkRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LinkServiceDeleteLinkArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("delete_link_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceDeleteLinkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LinkServiceDeleteLinkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceDeleteLinkArgs(%+v)", *p)

}

func (p *LinkServiceDeleteLinkArgs) DeepEqual(ano *LinkServiceDeleteLinkArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LinkServiceDeleteLinkArgs) Field1DeepEqual(src *DeleteLinkRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceDeleteLinkResult struct {
	Success *DeleteLinkResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteLinkResponse" json:"success,omitempty"`
}

func NewLinkServiceDeleteLinkResult() *LinkServiceDeleteLinkResult {
	return &LinkServiceDeleteLinkResult{}
}

func (p *LinkServiceDeleteLinkResult) InitDefault() {
}

var LinkServiceDeleteLinkResult_Success_DEFAULT *DeleteLinkResponse

func (p *LinkServiceDeleteLinkResult) GetSuccess() (v *DeleteLinkResponse) {
	if !p.IsSetSuccess() {
		return LinkServiceDeleteLinkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LinkServiceDeleteLinkResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteLinkResponse)
}

var fieldIDToName_LinkServiceDeleteLinkResult = map[int16]string{
	0: "success",
}

func (p *LinkServiceDeleteLinkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LinkServiceDeleteLinkResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceDeleteLinkResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceDeleteLinkResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteLinkResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LinkServiceDeleteLinkResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("delete_link_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceDeleteLinkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LinkServiceDeleteLinkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceDeleteLinkResult(%+v)", *p)

}

func (p *LinkServiceDeleteLinkResult) DeepEqual(ano *LinkServiceDeleteLinkResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LinkServiceDeleteLinkResult) Field0DeepEqual(src *DeleteLinkResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceChangeLinkArgs struct {
	Req *ChangeLinkRequest `thrift:"req,1" frugal:"1,default,ChangeLinkRequest" json:"req"`
}

func NewLinkServiceChangeLinkArgs() *LinkServiceChangeLinkArgs {
	return &LinkServiceChangeLinkArgs{}
}

func (p *LinkServiceChangeLinkArgs) InitDefault() {
}

var LinkServiceChangeLinkArgs_Req_DEFAULT *ChangeLinkRequest

func (p *LinkServiceChangeLinkArgs) GetReq() (v *ChangeLinkRequest) {
	if !p.IsSetReq() {
		return LinkServiceChangeLinkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LinkServiceChangeLinkArgs) SetReq(val *ChangeLinkRequest) {
	p.Req = val
}

var fieldIDToName_LinkServiceChangeLinkArgs = map[int16]string{
	1: "req",
}

func (p *LinkServiceChangeLinkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LinkServiceChangeLinkArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceChangeLinkArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceChangeLinkArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewChangeLinkRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LinkServiceChangeLinkArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("change_link_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceChangeLinkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LinkServiceChangeLinkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceChangeLinkArgs(%+v)", *p)

}

func (p *LinkServiceChangeLinkArgs) DeepEqual(ano *LinkServiceChangeLinkArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LinkServiceChangeLinkArgs) Field1DeepEqual(src *ChangeLinkRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceChangeLinkResult struct {
	Success *ChangeLinkResponse `thrift:"success,0,optional" frugal:"0,optional,ChangeLinkResponse" json:"success,omitempty"`
}

func NewLinkServiceChangeLinkResult() *LinkServiceChangeLinkResult {
	return &LinkServiceChangeLinkResult{}
}

func (p *LinkServiceChangeLinkResult) InitDefault() {
}

var LinkServiceChangeLinkResult_Success_DEFAULT *ChangeLinkResponse

func (p *LinkServiceChangeLinkResult) GetSuccess() (v *ChangeLinkResponse) {
	if !p.IsSetSuccess() {
		return LinkServiceChangeLinkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LinkServiceChangeLinkResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChangeLinkResponse)
}

var fieldIDToName_LinkServiceChangeLinkResult = map[int16]string{
	0: "success",
}

func (p *LinkServiceChangeLinkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LinkServiceChangeLinkResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceChangeLinkResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceChangeLinkResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewChangeLinkResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LinkServiceChangeLinkResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("change_link_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceChangeLinkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LinkServiceChangeLinkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceChangeLinkResult(%+v)", *p)

}

func (p *LinkServiceChangeLinkResult) DeepEqual(ano *LinkServiceChangeLinkResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LinkServiceChangeLinkResult) Field0DeepEqual(src *ChangeLinkResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceSeeLinkRankingArgs struct {
	Req *SeeLinkRankingRequest `thrift:"req,1" frugal:"1,default,SeeLinkRankingRequest" json:"req"`
}

func NewLinkServiceSeeLinkRankingArgs() *LinkServiceSeeLinkRankingArgs {
	return &LinkServiceSeeLinkRankingArgs{}
}

func (p *LinkServiceSeeLinkRankingArgs) InitDefault() {
}

var LinkServiceSeeLinkRankingArgs_Req_DEFAULT *SeeLinkRankingRequest

func (p *LinkServiceSeeLinkRankingArgs) GetReq() (v *SeeLinkRankingRequest) {
	if !p.IsSetReq() {
		return LinkServiceSeeLinkRankingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LinkServiceSeeLinkRankingArgs) SetReq(val *SeeLinkRankingRequest) {
	p.Req = val
}

var fieldIDToName_LinkServiceSeeLinkRankingArgs = map[int16]string{
	1: "req",
}

func (p *LinkServiceSeeLinkRankingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LinkServiceSeeLinkRankingArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceSeeLinkRankingArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceSeeLinkRankingArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSeeLinkRankingRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LinkServiceSeeLinkRankingArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("see_link_ranking_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceSeeLinkRankingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LinkServiceSeeLinkRankingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceSeeLinkRankingArgs(%+v)", *p)

}

func (p *LinkServiceSeeLinkRankingArgs) DeepEqual(ano *LinkServiceSeeLinkRankingArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LinkServiceSeeLinkRankingArgs) Field1DeepEqual(src *SeeLinkRankingRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceSeeLinkRankingResult struct {
	Success *SeeLinkRankingResponse `thrift:"success,0,optional" frugal:"0,optional,SeeLinkRankingResponse" json:"success,omitempty"`
}

func NewLinkServiceSeeLinkRankingResult() *LinkServiceSeeLinkRankingResult {
	return &LinkServiceSeeLinkRankingResult{}
}

func (p *LinkServiceSeeLinkRankingResult) InitDefault() {
}

var LinkServiceSeeLinkRankingResult_Success_DEFAULT *SeeLinkRankingResponse

func (p *LinkServiceSeeLinkRankingResult) GetSuccess() (v *SeeLinkRankingResponse) {
	if !p.IsSetSuccess() {
		return LinkServiceSeeLinkRankingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LinkServiceSeeLinkRankingResult) SetSuccess(x interface{}) {
	p.Success = x.(*SeeLinkRankingResponse)
}

var fieldIDToName_LinkServiceSeeLinkRankingResult = map[int16]string{
	0: "success",
}

func (p *LinkServiceSeeLinkRankingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LinkServiceSeeLinkRankingResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceSeeLinkRankingResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceSeeLinkRankingResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSeeLinkRankingResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LinkServiceSeeLinkRankingResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("see_link_ranking_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceSeeLinkRankingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LinkServiceSeeLinkRankingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceSeeLinkRankingResult(%+v)", *p)

}

func (p *LinkServiceSeeLinkRankingResult) DeepEqual(ano *LinkServiceSeeLinkRankingResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LinkServiceSeeLinkRankingResult) Field0DeepEqual(src *SeeLinkRankingResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceSeeUserLinkArgs struct {
	Req *SeeUserLinkRequest `thrift:"req,1" frugal:"1,default,SeeUserLinkRequest" json:"req"`
}

func NewLinkServiceSeeUserLinkArgs() *LinkServiceSeeUserLinkArgs {
	return &LinkServiceSeeUserLinkArgs{}
}

func (p *LinkServiceSeeUserLinkArgs) InitDefault() {
}

var LinkServiceSeeUserLinkArgs_Req_DEFAULT *SeeUserLinkRequest

func (p *LinkServiceSeeUserLinkArgs) GetReq() (v *SeeUserLinkRequest) {
	if !p.IsSetReq() {
		return LinkServiceSeeUserLinkArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LinkServiceSeeUserLinkArgs) SetReq(val *SeeUserLinkRequest) {
	p.Req = val
}

var fieldIDToName_LinkServiceSeeUserLinkArgs = map[int16]string{
	1: "req",
}

func (p *LinkServiceSeeUserLinkArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LinkServiceSeeUserLinkArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceSeeUserLinkArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceSeeUserLinkArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSeeUserLinkRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LinkServiceSeeUserLinkArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("see_user_link_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceSeeUserLinkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LinkServiceSeeUserLinkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceSeeUserLinkArgs(%+v)", *p)

}

func (p *LinkServiceSeeUserLinkArgs) DeepEqual(ano *LinkServiceSeeUserLinkArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LinkServiceSeeUserLinkArgs) Field1DeepEqual(src *SeeUserLinkRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceSeeUserLinkResult struct {
	Success *SeeUserLinkResponse `thrift:"success,0,optional" frugal:"0,optional,SeeUserLinkResponse" json:"success,omitempty"`
}

func NewLinkServiceSeeUserLinkResult() *LinkServiceSeeUserLinkResult {
	return &LinkServiceSeeUserLinkResult{}
}

func (p *LinkServiceSeeUserLinkResult) InitDefault() {
}

var LinkServiceSeeUserLinkResult_Success_DEFAULT *SeeUserLinkResponse

func (p *LinkServiceSeeUserLinkResult) GetSuccess() (v *SeeUserLinkResponse) {
	if !p.IsSetSuccess() {
		return LinkServiceSeeUserLinkResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LinkServiceSeeUserLinkResult) SetSuccess(x interface{}) {
	p.Success = x.(*SeeUserLinkResponse)
}

var fieldIDToName_LinkServiceSeeUserLinkResult = map[int16]string{
	0: "success",
}

func (p *LinkServiceSeeUserLinkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LinkServiceSeeUserLinkResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceSeeUserLinkResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceSeeUserLinkResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSeeUserLinkResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LinkServiceSeeUserLinkResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("see_user_link_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceSeeUserLinkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LinkServiceSeeUserLinkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceSeeUserLinkResult(%+v)", *p)

}

func (p *LinkServiceSeeUserLinkResult) DeepEqual(ano *LinkServiceSeeUserLinkResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LinkServiceSeeUserLinkResult) Field0DeepEqual(src *SeeUserLinkResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceLinkRedirectArgs struct {
	Req *LinkRedirectRequest `thrift:"req,1" frugal:"1,default,LinkRedirectRequest" json:"req"`
}

func NewLinkServiceLinkRedirectArgs() *LinkServiceLinkRedirectArgs {
	return &LinkServiceLinkRedirectArgs{}
}

func (p *LinkServiceLinkRedirectArgs) InitDefault() {
}

var LinkServiceLinkRedirectArgs_Req_DEFAULT *LinkRedirectRequest

func (p *LinkServiceLinkRedirectArgs) GetReq() (v *LinkRedirectRequest) {
	if !p.IsSetReq() {
		return LinkServiceLinkRedirectArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LinkServiceLinkRedirectArgs) SetReq(val *LinkRedirectRequest) {
	p.Req = val
}

var fieldIDToName_LinkServiceLinkRedirectArgs = map[int16]string{
	1: "req",
}

func (p *LinkServiceLinkRedirectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LinkServiceLinkRedirectArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceLinkRedirectArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceLinkRedirectArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewLinkRedirectRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LinkServiceLinkRedirectArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("link_redirect_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceLinkRedirectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LinkServiceLinkRedirectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceLinkRedirectArgs(%+v)", *p)

}

func (p *LinkServiceLinkRedirectArgs) DeepEqual(ano *LinkServiceLinkRedirectArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LinkServiceLinkRedirectArgs) Field1DeepEqual(src *LinkRedirectRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LinkServiceLinkRedirectResult struct {
	Success *LinkRedirectResponse `thrift:"success,0,optional" frugal:"0,optional,LinkRedirectResponse" json:"success,omitempty"`
}

func NewLinkServiceLinkRedirectResult() *LinkServiceLinkRedirectResult {
	return &LinkServiceLinkRedirectResult{}
}

func (p *LinkServiceLinkRedirectResult) InitDefault() {
}

var LinkServiceLinkRedirectResult_Success_DEFAULT *LinkRedirectResponse

func (p *LinkServiceLinkRedirectResult) GetSuccess() (v *LinkRedirectResponse) {
	if !p.IsSetSuccess() {
		return LinkServiceLinkRedirectResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LinkServiceLinkRedirectResult) SetSuccess(x interface{}) {
	p.Success = x.(*LinkRedirectResponse)
}

var fieldIDToName_LinkServiceLinkRedirectResult = map[int16]string{
	0: "success",
}

func (p *LinkServiceLinkRedirectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LinkServiceLinkRedirectResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LinkServiceLinkRedirectResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LinkServiceLinkRedirectResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewLinkRedirectResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LinkServiceLinkRedirectResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("link_redirect_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LinkServiceLinkRedirectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LinkServiceLinkRedirectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkServiceLinkRedirectResult(%+v)", *p)

}

func (p *LinkServiceLinkRedirectResult) DeepEqual(ano *LinkServiceLinkRedirectResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LinkServiceLinkRedirectResult) Field0DeepEqual(src *LinkRedirectResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
